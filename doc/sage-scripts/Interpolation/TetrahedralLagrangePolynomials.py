# This file was *autogenerated* from the file TetrahedralLagrangePolynomials.sage.
from sage.all_cmdline import *   # import sage library
_sage_const_3 = Integer(3); _sage_const_2 = Integer(2); _sage_const_1 = Integer(1); _sage_const_0 = Integer(0); _sage_const_5 = Integer(5); _sage_const_4 = Integer(4); _sage_const_10 = Integer(10); _sage_const_56 = Integer(56); _sage_const_20 = Integer(20); _sage_const_35 = Integer(35)# This Sage code computes the Lagrange basis functions for triangles

u = var('u')
v = var('v')
w = var('w')

vars = [u, v, w]
nDofs = [_sage_const_4 , _sage_const_10 , _sage_const_20 , _sage_const_35 , _sage_const_56 ]


# Produce Pascal Tetrahedron
def pascalTetrahedron(n) :
  PT = []
  for i in range(_sage_const_0 , n + _sage_const_1 ) : 
    for j in range(_sage_const_0 , n + _sage_const_1  - i) :
      for k in range(_sage_const_0 , n + _sage_const_1  - i - j) :
	PT.append([k,j,i])
  return PT;

# Produces sets of tetrahedral points points  
def tetrahedralPoints(n) :
  PT = pascalTetrahedron(n);
  return [ [PT[i][_sage_const_0 ] / n, PT[i][_sage_const_1 ] / n, PT[i][_sage_const_2 ] / n]    for i in range(len(PT)) ]

# Returns a set of all standard 3D polynomials of all orders up to and including n
def dofTetrahedralSet(n) :
  PT = pascalTetrahedron(n);
  return [u**PT[i][_sage_const_0 ] * v**PT[i][_sage_const_1 ] * w**PT[i][_sage_const_2 ]  for i in range(len(PT))]  
  
# Produces set of Lagrange interpolatory polynomials of order n
def Lagrange3DPolynomials(n) : 
  dofs = dofTetrahedralSet(n)
  dofNum = nDofs[n-_sage_const_1 ]
  p = tetrahedralPoints(n)
  V = matrix(dofNum, dofNum, _sage_const_1 /_sage_const_2 )

  for i in range(_sage_const_0 , len(dofs)) :
    for j in range(_sage_const_0 , len(dofs)) :
      V[i,j] = ((dofs[i].subs(u == p[j][_sage_const_0 ])).subs(v == p[j][_sage_const_1 ])).subs(w == p[j][_sage_const_2 ])
      
  return V.inverse() * matrix(dofs).transpose()
      

def printList(L) :
  for i in range(_sage_const_0 , L.nrows()) :
    print(L)[i]
  print("----------------------------------------")
  

printList(Lagrange3DPolynomials(_sage_const_1 ))
printList(Lagrange3DPolynomials(_sage_const_2 ))
printList(Lagrange3DPolynomials(_sage_const_3 ))
printList(Lagrange3DPolynomials(_sage_const_4 ))
printList(Lagrange3DPolynomials(_sage_const_5 ))
